package com.arrays;
/*
 *  Finding the Users Active Minutes
	You are given the logs for users' actions on LeetCode, and an integer k. The logs are represented by a 2D integer array logs where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei.

	Multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.

	The user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.

	You are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose UAM equals j.

	Return the array answer as described above.
 */
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import java.util.Set;

public class UserActiveMinutes {

public  static int[] findingUsersActiveMinutes(int[][] logs, int k) {
        
		/*
		 * The criteria state that we must count all users whose active minutes equal j; if a person is active 
		 * twice or more in a minute, we only need to count them once.
		 *
		 *	In order to record the pair of userid and active minutes, I am taking MapInteger,SetInteger>.
	   *
		 *	Since Set forbids duplications, it keeps only 1 and 5 if user 0 is active at minutes 5, 1, and 5.
		 *	Assuming that user 0's active minutes are 2, increment ans[2-1] since ans[0] stands for users active for 1 minute, ans[1] for users active for 2 minutes, etc.
		 * 
		 */
		Map<Integer,Set<Integer>> uam = new HashMap<>();
		//Iterate thwoug logs and fill the map
		for(int[] log:logs){
			int id = log[0];
			
			if(!uam.containsKey(id)) {
				uam.put(id, new HashSet<>());
			}
			uam.get(id).add(log[1]);			
		}
		
		/* Obtain the size of each set for each user as you iterate through the map, then increase the corresponding
		 * ans[setSize-1].
		 */
		int[] ans = new int[k];
	
		  
		for(int id : uam.keySet()) {
			int activeMin = uam.get(id).size();
			ans[activeMin-1]++;
		}
		
		return ans;
    }

	public static void main(String args[]) {
		int[][] logs = {{0,5},{1,2},{0,2},{0,5},{1,3}};
		int k = 5;
		findingUsersActiveMinutes(logs,k);
		
	}
}
