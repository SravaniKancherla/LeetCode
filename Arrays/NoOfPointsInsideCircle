import java.util.Arrays;
/**
 * Problem Statement:
 * You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.

   You are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.

   For each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.

   Return an array answer, where answer[j] is the answer to the jth query.
   
   Solution:
   1. Iterate through each and every query, and for every query, iterate through all the points given.
   2. Calculate the radius from the centre to each point given, and then compare the result to the radius
      given in the query to see if it is less than or equal to the radius.
   3. If so, the count variable should be increased as the point would be within the circle.
      Update the answer[j] for that query j once all the points have been completed for that particular query. 
   4. Return the answer array.
 *
 */
public class NoOfPointsInsideCircle {
	
	 public static int[] countPoints(int[][] points, int[][] queries) {	 	
		 	
		 	int[] answer = new int[queries.length];
			for(int j=0;j<queries.length;j++) {
		 		int c = queries[j][0];
		 		int h = queries[j][1];
		 		int r = queries[j][2];
		 		
		 		
		 		int count =0;
		 		for(int i=0;i<points.length;i++) {
		 			
		 			int x = points[i][0];
		 			int y = points[i][1];
		 			//find the radius from the center point to the given point
		 			
		 			if(((x-c)*(x-c)+(y-h)*(y-h))<=r*r) {
		 				count++;
		 				
		 			}
		 			answer[j] = count;
		 		}
		 	}
		 	
		 	return answer;
	    }
	 
	 public static void main(String args[]) {
		 int[][] points =  {{1,3},{3,3},{5,3},{2,2}};
		 int[][] queries = {{2,3,1},{4,3,1},{1,1,2}};
		 
		 int[] answer = countPoints(points,queries);
		 System.out.println(Arrays.toString(answer));
	 }
	
}
