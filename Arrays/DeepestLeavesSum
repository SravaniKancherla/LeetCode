/*
 * Given the root of a binary tree, return the sum of values of its deepest leaves.
 */
import java.util.LinkedList;
import java.util.Queue;

import bst.BSTToGST.TreeNode;

public class DeepestLeavesSum {

	public static class TreeNode {
	      int val;
	      TreeNode left;
	      TreeNode right;
	      TreeNode() {}
	      TreeNode(int val) { this.val = val; }
	      TreeNode(int val, TreeNode left, TreeNode right) {
	          this.val = val;
	          this.left = left;
	          this.right = right;
	      }
	  }
		
	
	/*
	 * Go level-by-level through the tree using level-order traversal. 
	 * Assign sum to 0 before beginning each level, then add up all the node values for that level.
	 * Make the sum 0 once more and calculate a fresh sum for the current level if there is an additional level.
	 *  Return sum, which is nothing more than the sum of the deepest leaves, if there are no further levels.
	 */
	public static int deepestLeavesSum_better(TreeNode root) {
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		int count =0;
		int sum =0;
		while(!q.isEmpty()) {
			int size = q.size();
			count++;
			sum=0;
			for(int i=0;i<size;i++) {
				
				TreeNode node = q.poll();
				sum+=node.val;
				if(node.left!=null)
					q.add(node.left);
				if(node.right != null)
					q.add(node.right);
			}
			}
		
		return sum;
	}
	
	public static void main(String args[]) {
		 TreeNode root = new TreeNode(4);
		 root.left = new TreeNode(1);
		 root.right = new TreeNode(6);
		 root.left.left = new TreeNode(0);
		 root.left.right = new TreeNode(2);
		 root.left.right.right = new TreeNode(3);
		 
		 root.right.left = new TreeNode(5);
		 root.right.right = new TreeNode(7);
		 root.right.right.right = new TreeNode(8);
		 
		 System.out.println(deepestLeavesSum_better(root));
	}

	
}
