import java.util.Arrays;

/*
 * Max Increase to Keep City Skyline
   There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.

	A city's skyline is the outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.

 	We are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.

	Return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.

 
 */
public class MaxIncreaseKeepCitySkyline {
	
public static int maxIncreaseKeepingSkyline(int[][] grid) {
        
	int n = grid.length;
	int m = grid[0].length;
	//Declare the arrays maxCols and maxRows to store max height of building in each row and column.
	int[] maxCols = new int[grid[0].length];
	int[] maxRows = new int[grid.length];
	
	/* Calculate and store the maximum height of each column, which is the height of the highest building that each
	 * column would have if seen from both the top and the bottom.It indicates that we are able to increase each 
	 * grid building's height in column i up to the value of maxcol[i].
	 * Calculate for each row as well as store the results int maxRows[] for the left and right views.*/
	
	for(int i=0;i<n;i++) {
		
		
		for(int j =0;j<m;j++)
		{
			maxRows[i]= Math.max(maxRows[i], grid[i][j]);
			maxCols[j] = Math.max(maxCols[j],grid[i][j]);
			
		}
	}
	
	/*Determine how much more height each structure can have without changing the skyline.
	which is the minimum of the maxRow[i],maxCols[j].*/
	int sum =0;
	for(int i=0;i<n;i++) {
		for(int j=0;j<m;j++) {
			sum+= Math.min(maxRows[i], maxCols[j])-grid[i][j];
		}
	}
	
	
	return sum;
    }

public static void main(String args[]) {
	int[][] grid = {{3,0,8,4},{2,4,5,7},{9,2,6,3},{0,3,1,0}};
	int sum = maxIncreaseKeepingSkyline(grid);
	System.out.println(sum);
}

}
